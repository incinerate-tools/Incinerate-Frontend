{"version":3,"sources":["components/File.js","App.js","serviceWorker.js","index.js"],"names":["File","props","className","this","name","status","onClick","window","open","location","origin","finishedFileName","buttonClicked","alert","removeFile","index","id","height","viewBox","width","stroke","xmlns","fillRule","strokeLinecap","strokeLinejoin","transform","d","strokeWidth","Component","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","App","state","files","masterStatus","addFiles","bind","onIncinerate","newFiles","i","setState","convertStatus","length","map","x","convertJob","resultObj","fileBase64","split","tempState","TextEncoder","encode","axios","post","data","tempFiles","splice","fileItems","key","href","target","onDrop","getRootProps","getInputProps","disabled","React","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.16b1f20c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport '../stylesheets/file.css';\n\nexport default class File extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"fileContainer\">\n                <div className=\"innerFileName\">\n                    <p>{this.props.name}</p>\n                </div>\n\n                <div className=\"innerStatus\">\n                    <p>{this.props.status == 'OK' ? <button className=\"downloadBtn\" onClick={() => window.open(`${window.location.origin}/download/${this.props.finishedFileName}`)}>Download</button> : this.props.status}</p>\n                </div>\n\n                <div className=\"innerClose\" onClick={() => {if(this.props.buttonClicked){alert(\"Removal process ongoing\")}else{this.props.removeFile(this.props.index)}}}>\n                    <svg\n                        id=\"close\"\n                        height={21}\n                        viewBox=\"0 0 21 21\"\n                        width={21}\n                        stroke=\"#F1D3BC\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <g\n                        fillRule=\"evenodd\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        transform=\"translate(5 5)\"\n                        >\n                        <path d=\"m.5 10.5 10-10\" strokeWidth=\"1.3\" />\n                        <path d=\"m10.5 10.5-10-10z\" strokeWidth=\"1.3\" />\n                        </g>\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport axios from 'axios';\n\nimport File from './components/File';\n\nimport './stylesheets/app.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\n\nconst toBase64 = (file, index) => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => resolve({result: reader.result, index: index});\n  reader.onerror = error => reject(error);\n});\n/**\n*/\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      files: [],\n      status: [],\n      masterStatus: '',\n      buttonClicked: ''\n    }\n\n    this.addFiles = this.addFiles.bind(this);\n    this.onIncinerate = this.onIncinerate.bind(this);\n  }\n\n  addFiles(newFiles) {\n    for(let i in newFiles){\n      this.setState({ files: [...this.state.files, newFiles[i]] })\n      this.setState({ status: [...this.state.status, {name: newFiles[i].name, convertStatus: 'Waiting', finishedFileName: ''}] })\n    }\n  }\n\n  async onIncinerate() {\n    this.setState({buttonClicked: true});\n\n    if(this.state.files.length <= 10 && this.state.files.length > 0){\n      for(let convertJob of this.state.files.map((x, index) => () => toBase64(x, index))){\n        let resultObj = await convertJob();\n        let fileBase64 = resultObj.result.split(',')[1];\n        let index = resultObj.index;\n\n        let tempState = this.state.status;\n        tempState[index].convertStatus = 'Processing';\n        this.setState({status: tempState});\n\n        if((new TextEncoder().encode(fileBase64)).length < 14000000){\n          try{\n            let result = await axios.post(`${window.location.origin}/api/strip`, {\n              file: fileBase64\n            })\n\n            let tempState = this.state.status;\n\n            if(result.data.status == 'LIMIT_REACHED'){\n              tempState[index].convertStatus = 'Daily limit reached';\n\n            }else if(result.data.status == 'SERVER_ERR'){\n              tempState[index].convertStatus = 'Server side error';\n\n            }else if(result.data.status == 'BAD_FILE_TYPE'){\n              tempState[index].convertStatus = 'Bad file type';\n\n            }else if(result.data.status == 'BAD_REQUEST'){\n              tempState[index].convertStatus = 'Bad request';\n\n            }else if(result.data.status == 'OK'){\n              tempState[index].convertStatus = 'OK';\n              tempState[index].finishedFileName = result.data.file;\n\n            }\n\n            this.setState({status: tempState});\n            if(index == this.state.files.length-1){\n              this.setState({buttonClicked: false});\n            }\n          }catch(err){\n            let tempState = this.state.status;\n            tempState[index].convertStatus = 'Server side error';\n\n            this.setState({status: tempState});\n            if(index == this.state.files.length-1){\n              this.setState({buttonClicked: false});\n            }\n          }\n        }else{\n            let tempState = this.state.status;\n            tempState[index].convertStatus = 'File too big';\n\n            this.setState({status: tempState});\n            if(index == this.state.files.length-1){\n              this.setState({buttonClicked: false});\n            }\n        }\n      }\n    }else if(this.state.files.length == 0){\n      alert(\"No files chosen\");\n    }else if(this.state.files.length > 10){\n      alert(\"Max file limit is 10 per 24 hours\")\n    }\n  }\n\n  removeFile(index){\n    let tempFiles = this.state.files;\n    tempFiles.splice(index, 1);\n\n    let tempStatus = this.state.status;\n    tempStatus.splice(index, 1);\n\n    this.setState({ files: tempFiles });\n  }\n\n  render() {\n    if(this.state.status.length > 0){\n      var fileItems = this.state.status.map((file, index) =>\n        <File name={file.name} status={file.convertStatus} finishedFileName={file.finishedFileName} index={index} key={index} removeFile={this.removeFile.bind(this)} buttonClicked={this.state.buttonClicked}/>\n      );\n    }else{\n      var fileItems = (\n        <div className=\"fileContainer\">\n            <div className=\"innerFileName\">\n                <p>No files chosen</p>\n            </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"appContainer\">\n        <div className=\"d-md-flex h-md-100 align-items-center\">\n\n          <div className=\"col-md-5 p-0 h-md-100 split-left\">\n              <div className=\"text-white d-md-flex align-items-center h-100 p-5 justify-content-center\">\n                  <div className=\"titleContainer\">\n                    <h1 className=\"title\"><b>INCINERATE</b></h1>\n                    <p className=\"subtitle\">A free, fast, and private metadata remover for the privacy conscious</p>\n                    <p className=\"subtitle\">Hidden Service mirror: <b>3mghupyalwu7gub3ncpe3tcynf54y2bliylnh6gbslrlib4liwsqlgyd.onion</b></p>\n                    <p className=\"subtitle\">Backend code is open source on\n                      <a href=\"https://github.com/incinerate-tools/Incinerate-Backend\" target=\"_blank\">\n                        <b> Github</b>\n                      </a>\n                    </p>\n                  </div>\n              </div>\n          </div>\n\n          <div className=\"col-md-7 p-0 h-md-100 split-right\">\n            <PerfectScrollbar>\n              <div className=\"align-items-center h-100 p-5 controlContainer\">\n                  <Dropzone onDrop={this.addFiles}>\n                    {({getRootProps, getInputProps}) => (\n                      <section className=\"dropZone\">\n                        <div {...getRootProps()}>\n                          <input {...getInputProps()} />\n                          <p><b>Drag and drop multiple files, or click to select files</b></p>\n                        </div>\n                      </section>\n                    )}\n                  </Dropzone>\n\n                {fileItems}\n\n                <br/>\n\n                <button className=\"submit\" onClick={this.onIncinerate} disabled={this.state.buttonClicked}>{this.state.buttonClicked ? \"PROCESSING\" : \"INCINERATE\"}</button>\n\n                <p className=\"status\">{this.state.masterStatus}</p>\n              </div>\n            </PerfectScrollbar>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './stylesheets/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}